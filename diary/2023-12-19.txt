2023-12-19

결론은 드디어 문제를 해결했다.

일단 매개변수로 받은 하나의 객체로 배열속 여러 공간을 채워넣을때,
깊은 복사를 해야한다고 어제 일기장에 언급했었다.
그중에 깊은 복사를 하는 방법중에 MemoryStream과 BinaryFormatter로
해당 객체를 직렬화하고, 새로운 object를 만들어서 이 빈 공간에 역직렬화한 객체를 집어넣고, 박싱을 하여 깊은 복사를 진행하는 방식이었다.
https://nagneo.tistory.com/25

해당 코드는 편의를 위해 제네릭 확장 메서드로 구현을 하였다.
이 코드에 염려되는 점은
예외가 뜨면 어쨌든 무언가를 리턴한다는 점이다.
이 코드가 프로그램의 수행을 보장하는 방어적 프로그래밍으로 된 것은 나쁘지 않지만,
내가 온전히 쓰기에는 부적합했다.
혹시 몰라서 return source; 부분을 return null;로 변형시켰다.
그랬더니 역시나 알규먼트가 된 객체들의 나의 타입들은 Serializable 어트리뷰트가 없었고, 그것을 null레퍼런스 익셉션으로 파악할 수 있었다.
이후에 실행했는데, 이번에는 복제된 존재들은 그냥 new()로 실행한 존재들이었다.
역시 아랫 부분이 문제였는데, 또한 try ... catch 구문에서 catch가 잡는 예외는 그냥 모든 예외를 집어삼켜버리는 Exception타입으로 지정되어 있었다.
try catch 구문을 전부 지워버렸다. 그들이 그토록 막고자 했던 예외는 무엇이었을까.

역시나, 알규먼트의 부모 클래스들이 직렬화 어트리뷰트가 달려있지 않아 발생한 예외였다.
나는 즉시 그것의 부모 클래스에게 직렬화 어트리뷰트를 달아주었다. 다행이 작동이 되는구나.
